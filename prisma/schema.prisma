//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PermissionType {
  READ
  CREATE
  UPDATE
  DELETE
  MANAGE
}

enum QuestionType {
  OBJECTIVE
  STRUCTURED
  OPINION
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Status {
  OPEN
  CLOSED
  SOLVED
}

enum ActivityType {
  VIEW_LESSON
  UNVIEW_LESSON
  ASK_QUESTION
  ANSWER_QUESTION
  UPVOTE_QUESTION
  DOWNVOTE_QUESTION
  UPVOTE_ANSWER
  DOWNVOTE_ANSWER
}

enum NotificationType {
  NEW_ANSWER
  ANSWER_ACCEPTED_USER
  ANSWER_ACCEPTED_TEACHER
  QUESTION_COMMENT
  ANSWER_COMMENT
  QUESTION_UPVOTE
  QUESTION_DOWNVOTE
  ANSWER_UPVOTE
  ANSWER_DOWNVOTE
  NEW_COURSE_QUESTION
  NEW_LESSON
  COURSE_UPDATE
  FOLLOWED_USER_QUESTION
  FOLLOWED_USER_ANSWER
  FOLLOWED_QUESTION_ANSWER
  FOLLOWED_TOPIC_QUESTION
  STUDENT_AT_RISK
  STUDENT_INACTIVE
  DAILY_ACTIVITY_SUMMARY
  WELCOME
  REPUTATION_MILESTONE
  WEEKLY_DIGEST
  ACCOUNT_UPDATE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum NotificationChannel {
  IN_APP
  EMAIL
  PUSH
}

enum AchievementType {
  FIRST_QUESTION
  FIRST_ANSWER
  FIRST_UPVOTE
  STREAK_7_DAYS
  STREAK_30_DAYS
  STREAK_100_DAYS
  POINTS_100
  POINTS_1000
  POINTS_10000
  HELPFUL_ANSWERER
  ACTIVE_LEARNER
  COMMUNITY_BUILDER
}

model User {
  id                        String                     @id() @default(cuid())
  name                      String?
  email                     String                     @unique()
  emailVerified             DateTime?
  image                     String?
  accounts                  Account[]
  sessions                  Session[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt()
  roles                     Role[]
  questions                 Question[]
  answers                   Answer[]
  questionVotes             QuestionVote[]
  answerVotes               AnswerVote[]
  comments                  Comment[]
  commentVotes              CommentVote[]
  createdCourses            Course[]                   @relation("CourseCreator")
  enrolledCourses           CourseEnrollment[]
  lessonViews               LessonView[]
  activityLogs              ActivityLog[]
  teacherAcceptedAnswers    Answer[]                   @relation("TeacherAcceptedAnswers")
  notifications             Notification[]             @relation("UserNotifications")
  notificationsAsActor      Notification[]             @relation("NotificationActor")
  notificationPreferences   NotificationPreferences?
  notificationSubscriptions NotificationSubscription[]
  notificationAnalytics     NotificationAnalytics[]
  contributions             UserContribution[]
  streaks                   UserStreak[]
  achievements              UserAchievement[]
}

model Role {
  id          Int          @id() @default(autoincrement())
  name        String
  users       User[]
  permissions Permission[]
}

model Permission {
  id    Int            @id() @default(autoincrement())
  name  PermissionType
  roles Role[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Question {
  id                       String         @id() @default(cuid())
  title                    String
  content                  String
  type                     QuestionType
  visibility               Visibility     @default(PUBLIC)
  classificationConfidence Float?         @default(0.0)
  classificationReasoning  String[]       @default([])
  topic                    String?
  attachments              Attachment[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt()
  authorId                 String
  author                   User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers                  Answer[]
  tags                     Tag[]
  votes                    QuestionVote[]
  comments                 Comment[]
  courseId                 String?
  course                   Course?        @relation(fields: [courseId], references: [id])
  lessonId                 String?
  lesson                   Lesson?        @relation(fields: [lessonId], references: [id])
  viewCount                Int            @default(0)
  slug                     String         @unique()
  status                   Status         @default(OPEN)

  @@index([courseId])
  @@index([lessonId])
}

model Answer {
  id                  String       @id() @default(cuid())
  content             String
  isAcceptedByUser    Boolean      @default(false)
  isAcceptedByTeacher Boolean      @default(false)
  acceptedByUserAt    DateTime?
  acceptedByTeacherId String?
  acceptedByTeacher   User?        @relation("TeacherAcceptedAnswers", fields: [acceptedByTeacherId], references: [id])
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt()
  authorId            String
  author              User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questionId          String
  question            Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes               AnswerVote[]
  comments            Comment[]
}

model Tag {
  id          String     @id() @default(cuid())
  name        String     @unique()
  description String?
  questions   Question[]
  aiGenerated Boolean    @default(false)
  verified    Boolean    @default(false)
  courses     Course[]
}

model Attachment {
  id         String   @id() @default(cuid())
  url        String
  type       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionVote {
  id         String   @id() @default(cuid())
  value      Int
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([questionId, userId])
}

model AnswerVote {
  id        String   @id() @default(cuid())
  value     Int
  answerId  String
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([answerId, userId])
}

model Comment {
  id         String        @id() @default(cuid())
  content    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt()
  authorId   String
  author     User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questionId String?
  question   Question?     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId   String?
  answer     Answer?       @relation(fields: [answerId], references: [id], onDelete: Cascade)
  votes      CommentVote[]
}

model CommentVote {
  id        String  @id() @default(cuid())
  value     Int
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model Course {
  id          String             @id() @default(cuid())
  title       String
  description String
  slug        String             @unique()
  joinCode    String?            @unique()
  modules     CourseModule[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt()
  authorId    String
  author      User               @relation("CourseCreator", fields: [authorId], references: [id])
  lessons     Lesson[]
  tags        Tag[]
  questions   Question[]
  enrollments CourseEnrollment[]

  @@index([authorId])
}

model CourseEnrollment {
  id        String   @id() @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Lesson {
  id        String         @id() @default(cuid())
  title     String
  slug      String
  summary   String?
  order     Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt()
  chapterId String?
  chapter   CourseChapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]
  views     LessonView[]
  files     LessonFile[]
  metadata  Json?          @default("{}")

  @@unique([courseId, slug])
}

model LessonFile {
  id        String   @id() @default(cuid())
  url       String
  type      String
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model LessonView {
  userId   String
  lessonId String
  viewedAt DateTime @updatedAt()
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson   Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@id([userId, lessonId])
}

model ActivityLog {
  id         String       @id() @default(cuid())
  userId     String
  type       ActivityType
  entityType String?
  entityId   String?
  metadata   Json?        @default("{}")
  createdAt  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([entityType, entityId])
}

model CourseModule {
  id        String          @id() @default(cuid())
  title     String
  slug      String
  order     Int
  courseId  String
  course    Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters  CourseChapter[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@unique([courseId, slug])
}

model CourseChapter {
  id        String       @id() @default(cuid())
  title     String
  slug      String
  order     Int
  moduleId  String
  module    CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())

  @@unique([moduleId, slug])
}

model Notification {
  id                String                  @id() @default(cuid())
  type              NotificationType
  title             String
  message           String
  priority          NotificationPriority    @default(MEDIUM)
  status            NotificationStatus      @default(UNREAD)
  channels          NotificationChannel[]
  metadata          Json?                   @default("{}")
  createdAt         DateTime                @default(now())
  readAt            DateTime?
  archivedAt        DateTime?
  userId            String
  user              User                    @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actorId           String?
  actor             User?                   @relation("NotificationActor", fields: [actorId], references: [id])
  relatedEntityType String?
  relatedEntityId   String?
  analytics         NotificationAnalytics[]

  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([relatedEntityType, relatedEntityId])
}

model NotificationPreferences {
  id                       String                @id() @default(cuid())
  userId                   String                @unique()
  user                     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  newAnswer                NotificationChannel[] @default([IN_APP, EMAIL])
  answerAccepted           NotificationChannel[] @default([IN_APP, EMAIL])
  questionComment          NotificationChannel[] @default([IN_APP, EMAIL])
  answerComment            NotificationChannel[] @default([IN_APP, EMAIL])
  questionVote             NotificationChannel[] @default([IN_APP])
  answerVote               NotificationChannel[] @default([IN_APP])
  newCourseQuestion        NotificationChannel[] @default([IN_APP, EMAIL])
  newLesson                NotificationChannel[] @default([IN_APP, EMAIL])
  courseUpdate             NotificationChannel[] @default([IN_APP, EMAIL])
  followedUserActivity     NotificationChannel[] @default([IN_APP])
  followedQuestionActivity NotificationChannel[] @default([IN_APP])
  studentEngagement        NotificationChannel[] @default([IN_APP, EMAIL])
  systemNotifications      NotificationChannel[] @default([IN_APP, EMAIL])
  emailDigestFrequency     String                @default("WEEKLY")
  quietHoursStart          String?
  quietHoursEnd            String?
  timezone                 String?               @default("UTC")
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt()
}

model NotificationSubscription {
  id               String                @id() @default(cuid())
  userId           String
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionType String
  entityId         String
  channels         NotificationChannel[] @default([IN_APP])
  createdAt        DateTime              @default(now())

  @@unique([userId, subscriptionType, entityId])
  @@index([subscriptionType, entityId])
}

model NotificationTemplate {
  id              String                @id() @default(cuid())
  type            NotificationType      @unique()
  titleTemplate   String
  messageTemplate String
  defaultPriority NotificationPriority  @default(MEDIUM)
  defaultChannels NotificationChannel[]
  variables       String[]
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt()
}

model NotificationBatch {
  id                    String    @id() @default(cuid())
  batchData             Json
  scheduledFor          DateTime?
  processingStartedAt   DateTime?
  processingCompletedAt DateTime?
  status                String    @default("PENDING")
  errorMessage          String?
  createdAt             DateTime  @default(now())

  @@index([status, scheduledFor])
}

model NotificationAnalytics {
  id             String              @id() @default(cuid())
  notificationId String
  notification   Notification        @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         String
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType      String
  channel        NotificationChannel
  timestamp      DateTime            @default(now())
  metadata       Json?               @default("{}")

  @@index([notificationId])
  @@index([userId, eventType])
  @@index([timestamp])
}

model UserContribution {
  id                 String   @id() @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date               DateTime @db.Date()
  questionsAsked     Int      @default(0)
  answersProvided    Int      @default(0)
  questionsUpvoted   Int      @default(0)
  questionsDownvoted Int      @default(0)
  answersUpvoted     Int      @default(0)
  answersDownvoted   Int      @default(0)
  lessonsViewed      Int      @default(0)
  commentsPosted     Int      @default(0)
  totalPoints        Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}

model UserStreak {
  id                    String    @id() @default(cuid())
  userId                String    @unique()
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStreak         Int       @default(0)
  longestStreak         Int       @default(0)
  lastActiveDate        DateTime? @db.Date()
  totalContributionDays Int       @default(0)
  totalPoints           Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt()
}

model UserAchievement {
  id         String          @id() @default(cuid())
  userId     String
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       AchievementType
  unlockedAt DateTime        @default(now())
  metadata   Json?           @default("{}")

  @@unique([userId, type])
  @@index([userId])
  @@index([type])
}
