// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(cuid())
  name            String?
  email           String             @unique @email
  password        String?            @password @omit @length(min: 8, max: 32)
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  // Optional for WebAuthn support
  Authenticator   Authenticator[]

  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  roles           Role[]
  
  // Add access policies
  @@allow('create', true) // Allow signups
  @@allow('read', true)
  @@allow('update', auth() == this) // Users can update their own profile
  @@deny('delete', true) // Prevent direct deletions

  questions       Question[]
  answers         Answer[]
  questionVotes   QuestionVote[]
  answerVotes     AnswerVote[]
  comments        Comment[]
  commentVotes    CommentVote[]
  
  // Course relations
  createdCourses  Course[]           @relation("CourseCreator")
  enrolledCourses CourseEnrollment[]
  lessonViews     LessonView[]
  activityLogs    ActivityLog[]
  
  // Teacher accepted answers relation
  teacherAcceptedAnswers Answer[]    @relation("TeacherAcceptedAnswers")
  
  // Notification system relations
  notifications              Notification[]          @relation("UserNotifications")
  notificationsAsActor       Notification[]          @relation("NotificationActor")
  notificationPreferences    NotificationPreferences?
  notificationSubscriptions  NotificationSubscription[]
  notificationAnalytics      NotificationAnalytics[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  users       User[] // users belonging to the role
  permissions Permission[] // permissions assigned to the role
  
  // Access control - roles can be read by anyone authenticated (needed for onboarding)
  @@allow('read', true)
  // Only admins can create/update/delete roles
  @@allow('all', auth().roles?[permissions?[name == MANAGE]])
}

enum PermissionType {
  READ    // Basic read/view access
  CREATE  // Ability to create new resources
  UPDATE  // Ability to modify existing resources
  DELETE  // Ability to remove resources
  MANAGE  // Full control (typically includes all above permissions)
}

model Permission {
  id    Int            @id @default(autoincrement())
  name  PermissionType
  roles Role[]
  
  // Access control - permissions can be read by anyone authenticated
  @@allow('read', true)
  // Only admins can create/update/delete permissions
  @@allow('all', auth().roles?[permissions?[name == MANAGE]])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])

  // Allow creation if it's the user's own account
  @@allow('create', auth() == user)
  
  // Allow read if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has READ permission
  @@allow('read', auth() == user || auth().roles?[permissions?[name == READ]])
  
  // Allow update if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has UPDATE permission
  @@allow('update', auth() == user || auth().roles?[permissions?[name == UPDATE]])
  
  // Allow delete if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has DELETE permission
  @@allow('delete', auth() == user || auth().roles?[permissions?[name == DELETE]])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Allow creation for authenticated users (when they log in)
  @@allow('create', auth() != null)

  // Allow read if:
  // 1. It's the user's own session OR
  // 2. The authenticated user has READ permission
  @@allow('read', auth() == user || auth().roles?[permissions?[name == READ]])

  // Allow update if:
  // 1. It's the user's own session OR
  // 2. The authenticated user has UPDATE permission
  @@allow('update', auth() == user || auth().roles?[permissions?[name == UPDATE]])

  // Allow delete if:
  // 1. It's the user's own session (logout) OR
  // 2. The authenticated user has DELETE permission
  @@allow('delete', auth() == user || auth().roles?[permissions?[name == DELETE]])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum QuestionType {
  OBJECTIVE
  STRUCTURED
  OPINION
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Status {
  OPEN
  CLOSED
  SOLVED
}

model Question {
  id          String         @id @default(cuid())
  title       String         @length(min: 3, max: 300)
  content     String         @length(min: 10)
  type        QuestionType
  visibility  Visibility     @default(PUBLIC)
  
  // AI Classification metadata
  classificationConfidence Float?        @default(0.0)
  classificationReasoning  String[]      @default([])
  
  // For formal questions
  topic       String?
  attachments Attachment[]
  
  // Metadata
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  authorId    String
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers     Answer[]
  tags        Tag[]
  votes       QuestionVote[]
  comments    Comment[]
  
  // Course structure relations
  courseId    String?
  course      Course?        @relation(fields: [courseId], references: [id])
  lessonId    String?
  lesson      Lesson?        @relation(fields: [lessonId], references: [id])
  
  // Engagement metrics
  viewCount   Int            @default(0)
  
  // Access control
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() == author)
  @@allow('delete', auth() == author || auth().roles?[permissions?[name == DELETE]])

  slug        String         @unique
  status      Status         @default(OPEN)
  
  // Add reverse relations for easy querying
  @@index([courseId])
  @@index([lessonId])
}

model Answer {
  id         String       @id @default(cuid())
  content    String       @length(min: 10)
  
  isAcceptedByUser    Boolean @default(false) @allow('update', auth() == question.author)
  isAcceptedByTeacher Boolean @default(false) @allow('update', auth() == question.course.author && question.courseId != null)
  acceptedByUserAt    DateTime? @allow('update', auth() == question.author)
  acceptedByTeacherId String? @allow('update', auth() == question.course.author && question.courseId != null)
  acceptedByTeacher   User?    @relation("TeacherAcceptedAnswers", fields: [acceptedByTeacherId], references: [id])
  
  // Metadata
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  
  // Relations
  authorId   String
  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questionId String
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes      AnswerVote[]
  comments   Comment[]
  
  // Access control
  @@allow('create', auth() != null)
  @@allow('read', question.visibility == PUBLIC || auth() == author || auth() == question.author || auth().roles?[name == "TEACHER"])
  
  // Allow updates by:
  // 1. Answer author (can update content and all fields)
  // 2. Question author (can update acceptance fields)
  // 3. Course teacher (can update teacher acceptance fields)
  @@allow('update', auth() == author || auth() == question.author || (auth() == question.course.author && question.courseId != null))
  
  @@allow('delete', auth() == author || auth().roles?[permissions?[name == DELETE]])
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  questions   Question[]
  
  // For AI-suggested tags
  aiGenerated Boolean    @default(false)
  verified    Boolean    @default(false)
  
  // Course relation
  courses     Course[]

  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() != null)
  @@allow('delete', auth().roles?[permissions?[name == DELETE]])
}

model Attachment {
  id         String   @id @default(cuid())
  url        String
  type       String      // e.g., "image", "document", etc.
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@allow('create', auth() != null)
  @@allow('read', question.visibility == PUBLIC || auth() == question.author)
  @@allow('delete', auth() == question.author || auth().roles?[permissions?[name == DELETE]])
}

model QuestionVote {
  id         String   @id @default(cuid())
  value      Int         // 1 for upvote, -1 for downvote
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([questionId, userId])
  @@allow('create,update', auth() == user)
  @@allow('read', true)
  @@allow('delete', auth() == user)
}

model AnswerVote {
  id       String @id @default(cuid())
  value    Int         // 1 for upvote, -1 for downvote
  answerId String
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([answerId, userId])
  @@allow('create,update', auth() == user)
  @@allow('read', true)
  @@allow('delete', auth() == user)
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @length(min: 1, max: 1000)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Polymorphic relation - can comment on either question or answer
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId   String?
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  
  // Comment voting
  votes      CommentVote[]
  
  // Access control
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() == author)
  @@allow('delete', auth() == author || auth().roles?[permissions?[name == DELETE]])
}

model CommentVote {
  id        String  @id @default(cuid())
  value     Int     // 1 for useful, -1 for not useful (if we implement it)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@allow('create,update', auth() == user)
  @@allow('read', true)
  @@allow('delete', auth() == user)
}

// Course models
model Course {
  id          String             @id @default(cuid())
  title       String             @length(min: 3, max: 100)
  description String             @length(min: 10, max: 1000)
  slug        String             @unique
  joinCode    String?            @unique  // Unique code for students to join the course
  
  modules     CourseModule[]
  
  // Metadata
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relations
  authorId    String
  author      User               @relation("CourseCreator", fields: [authorId], references: [id])
  lessons     Lesson[]           // Direct relation to lessons
  tags        Tag[]
  questions   Question[]
  enrollments CourseEnrollment[]
  
  // Access control
  @@allow('create', auth() != null && auth().roles?[name == "TEACHER"])
  @@allow('read', true)
  @@allow('update', auth() == author || auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() == author || auth().roles?[permissions?[name == DELETE]])

  @@index([authorId])
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Unique constraint to prevent duplicate enrollments
  @@unique([userId, courseId])
  
  // Access control
  @@allow('create', auth() == user)
  @@allow('read', auth() == user || auth() == course.author)
  @@allow('delete', auth() == user || auth() == course.author)
}

// New model for Lesson
model Lesson {
  id        String       @id @default(cuid())
  title     String       @length(min: 1, max: 100)
  slug      String
  summary   String?      // Optional summary or resource link
  order     Int
  
  // Metadata
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  // New relations for module/chapter
  chapterId String?
  chapter   CourseChapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  // Existing course relation retained
  courseId  String
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]  // Questions linked to this lesson
  views     LessonView[]
  files     LessonFile[]
  
  // Arbitrary metadata storage for lessons
  metadata   Json?       @default("{}")

  // Unique constraint for slug within a course
  @@unique([courseId, slug])
  
  // Access control
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() != null && auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}

// New model for LessonFile
model LessonFile {
  id        String   @id @default(cuid())
  url       String
  type      String
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}

// Activity logging schema
enum ActivityType {
  VIEW_LESSON
  UNVIEW_LESSON
  ASK_QUESTION
  ANSWER_QUESTION
  UPVOTE_QUESTION
  DOWNVOTE_QUESTION
  UPVOTE_ANSWER
  DOWNVOTE_ANSWER
}

model LessonView {
  userId   String
  lessonId String
  viewedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson   Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() == user)
  @@allow('delete', auth() == user)

  @@id([userId, lessonId])
}

model ActivityLog {
  id         String       @id @default(cuid())
  userId     String
  type       ActivityType
  entityType String?
  entityId   String?
  metadata   Json?        @default("{}")
  createdAt  DateTime     @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([entityType, entityId])
}

// New model for course modules
model CourseModule {
  id         String        @id @default(cuid())
  title      String        @length(min: 1, max: 100)
  slug       String
  order      Int
  courseId   String
  course     Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters   CourseChapter[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())

  @@unique([courseId, slug])
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() != null && auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}

// New model for course chapters
model CourseChapter {
  id         String        @id @default(cuid())
  title      String        @length(min: 1, max: 100)
  slug       String
  order      Int
  moduleId   String
  module     CourseModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessons    Lesson[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())

  @@unique([moduleId, slug])
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() != null && auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}

// Notification System Models

enum NotificationType {
  // Q&A Notifications
  NEW_ANSWER
  ANSWER_ACCEPTED_USER
  ANSWER_ACCEPTED_TEACHER
  QUESTION_COMMENT
  ANSWER_COMMENT
  QUESTION_UPVOTE
  QUESTION_DOWNVOTE
  ANSWER_UPVOTE
  ANSWER_DOWNVOTE
  
  // Course/Lesson Notifications
  NEW_COURSE_QUESTION
  NEW_LESSON
  COURSE_UPDATE
  
  // Subscription Notifications
  FOLLOWED_USER_QUESTION
  FOLLOWED_USER_ANSWER
  FOLLOWED_QUESTION_ANSWER
  FOLLOWED_TOPIC_QUESTION
  
  // Engagement Notifications
  STUDENT_AT_RISK
  STUDENT_INACTIVE
  DAILY_ACTIVITY_SUMMARY
  
  // System Notifications
  WELCOME
  REPUTATION_MILESTONE
  WEEKLY_DIGEST
  ACCOUNT_UPDATE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum NotificationChannel {
  IN_APP
  EMAIL
  PUSH
}

model Notification {
  id              String               @id @default(cuid())
  type            NotificationType
  title           String               @length(min: 1, max: 200)
  message         String               @length(min: 1, max: 1000)
  priority        NotificationPriority @default(MEDIUM)
  status          NotificationStatus   @default(UNREAD)
  channels        NotificationChannel[]
  metadata        Json?                @default("{}")
  createdAt       DateTime             @default(now())
  readAt          DateTime?
  archivedAt      DateTime?
  
  // Relations
  userId          String
  user            User                 @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actorId         String?
  actor           User?                @relation("NotificationActor", fields: [actorId], references: [id])
  
  // Polymorphic relations for the entity this notification is about
  relatedEntityType String?
  relatedEntityId   String?
  
  // Analytics relation
  analytics       NotificationAnalytics[]
  
  // Access control - users can only see their own notifications
  @@allow('create', auth() != null)
  @@allow('read', auth() == user)
  @@allow('update', auth() == user)
  @@allow('delete', auth() == user)
  
  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([relatedEntityType, relatedEntityId])
}

model NotificationPreferences {
  id                     String               @id @default(cuid())
  userId                 String               @unique
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Channel preferences for each notification category
  newAnswer              NotificationChannel[] @default([IN_APP, EMAIL])
  answerAccepted         NotificationChannel[] @default([IN_APP, EMAIL])
  questionComment        NotificationChannel[] @default([IN_APP, EMAIL])
  answerComment          NotificationChannel[] @default([IN_APP, EMAIL])
  questionVote           NotificationChannel[] @default([IN_APP])
  answerVote             NotificationChannel[] @default([IN_APP])
  newCourseQuestion      NotificationChannel[] @default([IN_APP, EMAIL])
  newLesson              NotificationChannel[] @default([IN_APP, EMAIL])
  courseUpdate           NotificationChannel[] @default([IN_APP, EMAIL])
  followedUserActivity   NotificationChannel[] @default([IN_APP])
  followedQuestionActivity NotificationChannel[] @default([IN_APP])
  studentEngagement      NotificationChannel[] @default([IN_APP, EMAIL])
  systemNotifications    NotificationChannel[] @default([IN_APP, EMAIL])
  
  // General preferences
  emailDigestFrequency   String               @default("WEEKLY") // DAILY, WEEKLY, MONTHLY, NEVER
  quietHoursStart        String?              // HH:mm format
  quietHoursEnd          String?              // HH:mm format
  timezone               String?              @default("UTC")
  
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  
  // Allow anyone authenticated to create notification preferences for any user (needed for system operations)
  @@allow('create', auth() != null)
  // Allow public reading of notification preferences (needed for notification system)
  @@allow('read', true)
  // Allow user to update their own preferences
  @@allow('update', auth() == user)
  @@allow('delete', auth() == user)
}

model NotificationSubscription {
  id               String              @id @default(cuid())
  userId           String
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionType String              // USER, QUESTION, COURSE, TAG, LESSON
  entityId         String              // ID of the entity being followed
  channels         NotificationChannel[] @default([IN_APP])
  createdAt        DateTime            @default(now())
  
  @@unique([userId, subscriptionType, entityId])
  @@allow('create', auth() != null)
  @@allow('read', auth() == user)
  @@allow('update', auth() == user)
  @@allow('delete', auth() == user)
  
  @@index([subscriptionType, entityId])
}

model NotificationTemplate {
  id              String               @id @default(cuid())
  type            NotificationType     @unique
  titleTemplate   String               @length(min: 1, max: 200)
  messageTemplate String               @length(min: 1, max: 1000)
  defaultPriority NotificationPriority @default(MEDIUM)
  defaultChannels NotificationChannel[]
  variables       String[]             // JSON array of variable names that can be replaced
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  @@allow('create', auth() != null && auth().roles?[permissions?[name == MANAGE]])
  @@allow('read', true)
  @@allow('update', auth() != null && auth().roles?[permissions?[name == MANAGE]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}

model NotificationBatch {
  id                     String              @id @default(cuid())
  batchData              Json                // Array of notification data
  scheduledFor           DateTime?
  processingStartedAt    DateTime?
  processingCompletedAt  DateTime?
  status                 String              @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  errorMessage           String?
  createdAt              DateTime            @default(now())
  
  @@allow('create', auth() != null)
  @@allow('read', auth() != null && auth().roles?[permissions?[name == READ]])
  @@allow('update', auth() != null && auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
  
  @@index([status, scheduledFor])
}

model NotificationAnalytics {
  id             String              @id @default(cuid())
  notificationId String
  notification   Notification        @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         String
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType      String              // DELIVERED, OPENED, CLICKED, DISMISSED
  channel        NotificationChannel
  timestamp      DateTime            @default(now())
  metadata       Json?               @default("{}")
  
  @@allow('create', auth() != null)
  @@allow('read', auth() != null && auth().roles?[permissions?[name == READ]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
  
  @@index([notificationId])
  @@index([userId, eventType])
  @@index([timestamp])
}
